let mapleader = ","
let g:mapleader = ","
nmap <leader>v :split ~/.vimrc<CR>
au BufRead $MYVIMRC set foldmethod=marker

" {{{ Plugins
set nocompatible
call plug#begin('~/.vim/plugged')

" {{{ Editing Mechanics
Plug 'tpope/vim-repeat'                " Fix repeating for plugin commands
Plug 'tpope/vim-unimpaired'            " Pairwise commands [b
" Plug 'tpope/vim-surround'            " Parentheses, quotes, etc.
Plug 'machakann/vim-sandwich'          " More vim-like vim-surround?
Plug 'tpope/vim-dispatch'              " Run background processes in tmux tabs
Plug 'tpope/vim-commentary'            " Toggle comments
Plug 'vim-scripts/ReplaceWithRegister' " Atomic replace text object
Plug 'christoomey/vim-sort-motion'     " Sort a text object
Plug 'Raimondi/delimitMate'            " Automatically insert matching brackets
Plug 'tpope/vim-endwise'               " Automatically insert end
Plug 'tommcdo/vim-lion'                " Align comments etc with gl#
Plug 'tpope/vim-abolish'               " :%Subvert/facilit{y,ies}/building{,s}/g
Plug 'tpope/vim-speeddating'           " <C-A> and <C-X> for dates
Plug 'icatalina/vim-case-change'       " Makes ~ cycle through camel, snake case
Plug 'AndrewRadev/splitjoin.vim'       " gS -- transform to multiline; gJ -- transform to oneliner

Plug 'kana/vim-textobj-user'
Plug 'fvictorio/vim-textobj-backticks' " i`
Plug 'kana/vim-textobj-diff'           " idh -- diff section
Plug 'kana/vim-textobj-entire'         " ie -- entire document
Plug 'kana/vim-textobj-indent'         " ii -- area of common indent
Plug 'kana/vim-textobj-line'           " il
Plug 'machakann/vim-textobj-delimited' " id -- each delimited part of a camel/snake/kabob-case word
Plug 'reedes/vim-textobj-quote'        " iq -- curly quotes.
Plug 'tek/vim-textobj-ruby'            " if(unction), c(lass), and r for a block. an for a Scoped::Name
Plug 'whatyouhide/vim-textobj-xmlattr' " ix
" }}}

" {{{ UI Enhancements
Plug 'rubik/vim-base16-paraiso'
Plug 'arzg/vim-colors-xcode'
Plug 'morhetz/gruvbox'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'airblade/vim-gitgutter'   " Diff markers in the gutter
Plug 'bling/vim-airline'        " Status
Plug 'vim-airline/vim-airline-themes'
" }}}

" {{{ IDE-Like Behavior
Plug 'tpope/vim-fugitive'       " Git
Plug 'tpope/vim-rhubarb'        " GitHub
Plug 'rizzatti/dash.vim'        " Open the docs
Plug 'tpope/vim-projectionist'  " :Econtroller user
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'w0rp/ale'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'ntpeters/vim-better-whitespace' " Highlight trailing whitespace
Plug 'vim-scripts/Rename'
Plug 'christoomey/vim-tmux-navigator'
if executable('shadowenv')
  Plug 'Shopify/shadowenv.vim'
endif
Plug 'janko/vim-test'
" }}}

" {{{ Language Support

" Assembly {{{
Plug 'nviennot/vim-armasm'
" }}}

" Crystal {{{
Plug 'rhysd/vim-crystal'
" }}}

" CSS {{{
Plug 'hail2u/vim-css3-syntax'
" Plug 'gko/vim-coloresque' " Highlight colors like #009bf9
" }}}

" Elixir {{{
Plug 'elixir-editors/vim-elixir'
" }}}

" Go {{{
Plug 'jnwhiteh/vim-golang'
" }}}

" HTML {{{
Plug 'alvan/vim-closetag'
" }}}

" Javascript etc. {{{
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'mxw/vim-jsx'
Plug 'Quramy/vim-js-pretty-template'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'posva/vim-vue'
Plug 'kchmck/vim-coffee-script'
Plug 'jparise/vim-graphql'
" }}}

" Markdown {{{
Plug 'plasticboy/vim-markdown'
" }}}

" Liquid {{{
Plug 'tpope/vim-liquid'
" }}}

" Reason {{{
Plug 'reasonml-editor/vim-reason-plus'
" }}}

" Ruby {{{
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'thoughtbot/vim-rspec'
Plug 'noprompt/vim-yardoc'
" }}}

" TOML {{{
Plug 'cespare/vim-toml'
" }}}

" YAML {{{
Plug 'stephpy/vim-yaml'
Plug 'pedrohdz/vim-yaml-folds'
" }}}

" }}}

call plug#end()
" }}}

" Editing mechanics {{{

set backspace=eol,start,indent " Let backspace wrap
set whichwrap+=<,>,h,l         " Let movement wrap
set expandtab                  " Use spaces instead of tabs
set smarttab                   " Be smart when using tabs ;)
set shiftwidth=2               " Tab width
set tabstop=2                  " "
set ai                         " Auto indent
set si                         " Smart indent
set wrap                       " Wrap lines
set tw=80 " Limit line length
set lbr " Soft wrap at word boundaries

" Smashing escape mapping
inoremap jk <Esc>
inoremap kj <Esc>

" Indenting that keeps visuals selected
vnoremap < <gv
vnoremap > >gv

" Fast save
nmap <leader>w :w!<cr>

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Don’t open folds when using { and } to move
set foldopen-=block

" Automatically open all folds when opening a file
autocmd BufWinEnter * let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)'))


let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

let NERDSpaceDelims = 1

map g" <Plug>ReplaceWithCurly

" }}}

" UI enhancements {{{

syntax enable

set nu           " Show line number
set rnu          " Use relative line numbers
set so=7         " Pad the edge of the screen
set cmdheight=2  " Height of the command bar
set hid          " A buffer becomes hidden when it is abandoned
set showmatch    " Show matching brackets when text indicator is over them
set mat=2        " How many tenths of a second to blink when matching brackets
set laststatus=2 " Always show statusline
set cc=121       " Show where 120 chars is

" GUI Options
if has("gui_running")
 set guifont=IBM\ Plex\ Mono
 set guioptions-=L
 set guioptions-=r
 set showtabline=0
 let g:solarized_menu=0
 let g:airline_powerline_fonts = 0
endif

if has('mouse_sgr')
 set ttymouse=sgr
endif

set termguicolors
colorscheme base16-paraiso
set bg=dark
let g:airline_theme = 'lucius' " 'lucius' is a good general-purpose theme

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled= 1
" let g:airline_left_sep = '▙▖'
" let g:airline_right_sep = '▗▟'
" let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.whitespace = 'Ξ'

nmap <silent> [t :tabprevious<cr>
nmap <silent> ]t :tabnext<cr>

" }}}

" IDE-like behavior {{{

set ignorecase              " Ignore case when searching
set hlsearch                " Highlight search results
set incsearch               " Search as I type
set smartcase               " When searching try to be smart about cases
set wildmenu                " Turn on the WiLd menu
set wildignore=*.o,*~,*.pyc " Ignore compiled files
set undofile                " Persistent history between sessions

" Toggle spell check
nnoremap <silent> <leader>s :set spell!<CR>
set spelllang=en

" cd to this file’s directory
nnoremap <silent><leader>lcd :cd %:p:h<cr>

" Clean up when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>:ccl<cr>:GitGutterAll<cr>

set mouse=a " Mouses are useful

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Kwbd<cr>
" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

map <leader>e :Explore<cr>

" Specify the behavior when switching between buffers
try
 set switchbuf=useopen,usetab,newtab
   set stal=2
   catch
   endtry
   " Return to last edit position when opening files
   autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
"Remember info about open buffers on close
set viminfo^=%

" Search for current selection
vnoremap * y/\V<C-r>=escape(@",'/\')<CR><CR>

" Dash
nnoremap <silent> K :Dash<cr>

" Ale
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_fix_on_save = 1
let g:ale_sign_error = 'X'
let g:ale_sign_warning = '?'
let g:ale_statusline_format = ['X %d', '? %d', '']
let g:ale_echo_msg_format = '[%linter%] %s'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
let g:ale_linters_explicit = 1
let g:ale_linters = {}
let g:ale_fixers = {}

" Coc

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
     \ pumvisible() ? "\<C-n>" :
     \ <SID>check_back_space() ? "\<TAB>" :
     \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
 let col = col('.') - 1
 return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Close preview window when completion is done
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

nnoremap <silent> ,, :call <SID>show_documentation()<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gr <Plug>(coc-references)

function! s:show_documentation()
 if &filetype == 'vim'
   execute 'h '.expand('<cword>')
 else
   call CocAction('doHover')
 endif
endfunction

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <silent> <leader>! <Plug>(coc-codeaction)
vmap <silent> <leader>! <Plug>(coc-codeaction-selected)

" Fzf
    " Customize fzf colors to match your color scheme
    " - fzf#wrap translates this to a set of `--color` options
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

command! -bang -nargs=* GGrepNoTests
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

nmap <silent> <c-p> :GFiles<CR>
nmap <silent> <c-t> :Buffers<CR>
nmap <silent> <c-f> :GGrep<CR>

" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Vim Test
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
let test#strategy = "dispatch"

" }}}

" Language support {{{

" Assembly {{{
au BufRead,BufNewFile *.asm let asmsyntax='armasm'|let filetype_inc='armasm'
" }}}

" HAML {{{
au FileType haml setlocal iskeyword-=.
" }}}

" HTML {{{
let g:closetag_filetypes = 'eruby,html,xhtml'
au FileType eruby,html,xhtml let b:delimitMate_matchpairs = "(:),[:],{:}"
" }}}

" Javascript etc. {{{
let g:jsx_ext_required = 0

au FileType javascript set foldmethod=syntax
au FileType javascript let b:delimitMate_quotes = "\"'`"

let g:vue_disable_pre_processors=1 " It's way slow otherwise
" }}}

" LaTeX {{{
au FileType tex nnoremap <leader>ll :!lualatex %<cr>
au FileType tex nnoremap <leader>lb :!lualatex %:r; biber %:r; lualatex %:r;<cr>
au FileType tex nnoremap <leader>lv :!open %:r.pdf<cr>
" }}}

" Markdown {{{
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_folding_level = 6
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_fenced_languages = [
\ 'js=typescript',
\ 'jsx=typescript',
\ 'ts=typescript',
\ 'haskell=haskell',
\ 'tsx=typescript']
au FileType markdown setlocal formatoptions=twacq spell
autocmd FileType markdown call textobj#quote#init()
" }}}

" Mail {{{
au FileType mail setlocal textwidth=80 formatoptions=twacq spell nolist bg=light
" }}}

" Ruby {{{
au FileType ruby setlocal iskeyword-=.

let g:ale_linters['ruby'] = ['rubocop']
let g:ale_fixers['ruby'] = ['rubocop']

let g:rails_projections = {
\   "config/routes.rb": {
\     "command": "routes"},
\   "spec/features/*_spec.rb": {
\     "type": "feature",
\     "template": [
\       "require 'rails_helper'",
\       "",
\       "feature '{underscore|capitalize|blank}' do",
\       "",
\       "end" ]}}

let g:rails_gem_projections = {
\   "factory_bot_rails": {
\     "spec/factories/*.rb": {
\       "type": "factory",
\       "template": [
\         "FactoryBot.define do",
\         "  factory :{underscore} do",
\         "",
\         "  end",
\         "end"],
\       "related": "app/models/{}.rb" } } }

" Fade out sorbet signatures
augroup format_ruby
  autocmd Syntax ruby syn region sorbetSig start='sig {' end='}'
  autocmd Syntax ruby syn region sorbetSig start='sig do' end='end'
  autocmd Syntax ruby hi def link sorbetSig Comment
augroup END

let g:splitjoin_trailing_comma = 1
let g:splitjoin_ruby_hanging_args = 0
let g:splitjoin_ruby_curly_braces = 0
let g:splitjoin_ruby_options_as_arguments = 1

" }}}

" {{{ Rust
au FileType rust setlocal colorcolumn=100
" }}}

" {{{ Zettelkasten
function! SNote(...)
  let path = strftime("%Y%m%d%H%M")." ".trim(join(a:000)).".md"
  execute ":sp " . fnameescape(path)
endfunction
command! -nargs=* SNote call SNote(<f-args>)

function! Note(...)
  let path = strftime("%Y%m%d%H%M")." ".trim(join(a:000)).".md"
  execute ":e " . fnameescape(path)
endfunction
command! -nargs=* Note call Note(<f-args>)

function! ZettelkastenSetup()
  if expand("%:t") !~ '^[0-9]\+'
    return
  endif
  " syn region mkdFootnotes matchgroup=mkdDelimiter start="\[\["    end="\]\]"

  inoremap <expr> <plug>(fzf-complete-path-custom) fzf#vim#complete#path("rg --files -t md \| sed 's/^/[[/g' \| sed 's/$/]]/'")
  imap <buffer> [[ <plug>(fzf-complete-path-custom)

  function! s:CompleteTagsReducer(lines)
    if len(a:lines) == 1
      return "#" . a:lines[0]
    else
      return split(a:lines[1], '\t ')[1]
    end
  endfunction

  inoremap <expr> <plug>(fzf-complete-tags) fzf#vim#complete(fzf#wrap({
        \ 'source': 'zkt-raw',
        \ 'options': '--multi --ansi --nth 2 --print-query --exact --header "Enter without a selection creates new tag"',
        \ 'reducer': function('<sid>CompleteTagsReducer')
        \ }))
  imap <buffer> # <plug>(fzf-complete-tags)
endfunction

autocmd BufNew,BufNewFile,BufRead ~/Documents/Zettelkasten/*.md call ZettelkastenSetup()
" }}}

" }}}

" Technical details {{{

set encoding=utf8
set ffs=unix,dos,mac " Use Unix as the standard file type
set lazyredraw       " Don't redraw while executing macros (perf)
set magic            " For regular expressions turn magic on
set noerrorbells     " No annoying sound on errors
set tm=500           " Timeout
set history=700      " Long memory
set hidden           " CoC wants this set?
set updatetime=300   " So CursorHold fires after a more reasonable time

" }}}

